import java.util.regex.Pattern

apply plugin: 'jacoco'

jacoco {
    reportsDir = file("${project.buildDir}/reports/jacoco")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

// Configured how the jacoco will create the code coverage. This customization will trigger the unit and integration tests
// that will generate a merge code coverage.
// TODO Must run the emulator first before starting this task
// TODO Add the ui test coverage: 'createDebugCoverageReport' and "${project.buildDir}/outputs/code-coverage/connected/*.ec"
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Verification"
    description = "Runs a unit test with jacoco code coverage."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    // TODO(Re-check all of this)
    def fileFilter = [
            '**/*Ext*.*', // TODO Remove this? I dont know... :(
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/*Activity*.*',
            '**/*Fragment*.*',
            '**/*$[0-9].*',
            '**/*$ViewBinder*.*',
            '**/*$InjectAdapter*.*',
            '**/DebugUtil*.*',
            'android/**/*.*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = files(
            "${project.buildDir}/jacoco/testDebugUnitTest.exec"
    )
    doLast {
        // Display the total coverage for the CI to parse it and when it
        // parsed the CI will generate a badge for the coverage.
        def jacocoHtmlIndexFile = new File(reports.html.destination, "index.html")
        def jacocoHtmlIndexFileContent = new StringBuilder()
        jacocoHtmlIndexFile.eachLine { line ->
            jacocoHtmlIndexFileContent.append line
        }
        def codeCoveragePattern = Pattern.compile("Total.*?([0-9]{1,3})%")
        def codeCoverageMatcher = codeCoveragePattern.matcher(jacocoHtmlIndexFileContent)
        if (codeCoverageMatcher.find()) {
            println()
            println("Coverage Total: " + codeCoverageMatcher.group(1) + "%")
        }
    }
}
