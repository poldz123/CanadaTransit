apply plugin: 'com.android.application'
apply plugin: 'com.adarshr.test-logger'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

apply from: '../plugins/jacoco-plugin.gradle'
apply from: '../plugins/detekt-plugin.gradle'

def getGitCommitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        defaultConfig {

            kapt {
                arguments {
                    // This is the location of the generated schemas for the Room database and
                    // must be added to version control but removed from APK.
                    arg("room.schemaLocation", "$project.projectDir/schemas".toString())
                    arg("room.incremental", "true")
                }
            }
        }
    }

    viewBinding {
        enabled = true
    }

    sourceSets {
        String mainKotlinDir = "src/main/kotlin"
        String sharedTestKotlinDir = "src/shared/kotlin"
        String sharedResourceKotlinDir = "src/shared/res"
        String unitTestKotlinDir = "src/test/kotlin"
        String androidTestKotlinDir = "src/androidTest/kotlin"

        main {
            java.srcDir mainKotlinDir
        }

        test {
            java.srcDir unitTestKotlinDir
            java.srcDir sharedTestKotlinDir
            resources.srcDir sharedResourceKotlinDir
        }

        androidTest {
            java.srcDir androidTestKotlinDir
            java.srcDir sharedTestKotlinDir
            resources.srcDir sharedResourceKotlinDir
        }
    }

    defaultConfig {
        buildConfigField "String", "COMMIT_HASH", "\"${getGitCommitHash()}\""
    }

    buildTypes {
        debug {
            testCoverageEnabled false
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests.includeAndroidResources = true
        unitTests.all {
            // Apply the gradle logs which the custom logger will configure
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    lintOptions {
        xmlReport false
        htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
        disable "PluralsCandidate", "UseCompoundDrawables", "VectorPath", "ContentDescription", "IconLocation", "Overdraw", "UnusedResources"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        // TODO: Removed when activity and fragment ktx rc versions is not needed anymore
        // https://stackoverflow.com/questions/48988778/cannot-inline-bytecode-built-with-jvm-target-1-8-into-bytecode-that-is-being-bui
        jvmTarget = "1.8"
    }

}

// Makes sure that kotlin test will not be used in production code
afterEvaluate {
    android.sourceSets.all { sourceSet ->
        if (!sourceSet.name.startsWith("test") || !sourceSet.name.startsWith("androidTest")) {
            sourceSet.kotlin.setSrcDirs([])
        }
    }
}

// Task used to do code formatting to the entire source code.
task detektFormat(type: io.gitlab.arturbosch.detekt.Detekt) {
    group = "Code Format"
    description = "Runs a detekt with autocorrect code formatting."
    input = files("$rootDir/app/src")
    config = files("$rootDir/plugins/data/detekt-format-plugin-config.yml")
    autoCorrect = true
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Community Library
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinLibraryVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidLibraryVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaLibraryVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitLibraryVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitLibraryVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitLibraryVersion"
    implementation "com.squareup.moshi:moshi:$moshiLibraryVersion"
    implementation "net.danlew:android.joda:$jodaTimeAndroidLibraryVersion"
    implementation "com.jakewharton.timber:timber:$timberLibraryVersion"
    implementation "com.github.bumptech.glide:glide:$glideLibraryVersion"
    kapt "com.github.bumptech.glide:compiler:$glideLibraryVersion"

    // Google Library
    implementation "com.google.android.material:material:$googleMaterialLibraryVersion"

    // AndroidX Google Library
    implementation "androidx.room:room-runtime:$googleRoomLibraryVersion"
    implementation "androidx.room:room-rxjava2:$googleRoomLibraryVersion"
    implementation "androidx.appcompat:appcompat:$googleSupportLibraryVersion"
    implementation "androidx.constraintlayout:constraintlayout:$googleContraintLayoutLibraryVersion"
    implementation "androidx.activity:activity-ktx:$googleActivityKtxVersion"
    implementation "androidx.fragment:fragment-ktx:$googleFragmentKtxVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$googleLifecycleExtension"
    implementation "androidx.lifecycle:lifecycle-common-java8:$googleLifecycleExtension"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$googleLifecycleExtension"
    kapt "androidx.room:room-compiler:$googleRoomLibraryVersion"

    // Compile time plugin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    // Test Library
    androidTestImplementation "com.google.code.findbugs:jsr305:$jsr305LibraryVersion"
    androidTestImplementation("androidx.test.espresso:espresso-core:$espressoLibraryVersion", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    testImplementation "junit:junit:$junitLibraryVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "joda-time:joda-time:$jodaTimeAndroidLibraryVersion"
    testImplementation "org.mockito:mockito-core:$mockitoLibraryVersion"
    testImplementation "org.robolectric:robolectric:$robolectricLibraryVersion"
    testImplementation "androidx.test:runner:$googleTestSupport"
    testImplementation "androidx.test:rules:$googleTestSupport"
    testImplementation "com.google.truth:truth:$googleTrustLibraryVersion"

    // Shared Test Library
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpLibraryVersion"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttpLibraryVersion"
}